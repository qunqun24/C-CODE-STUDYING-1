1.关于函数的声明和定义说法正确的是（B）
A.函数的定义必须放在函数的使用之前

B.函数必须保证先声明后使用

C.函数的定义在使用之后，也可以不声明

D.函数的声明就是说明函数怎么实现的

2.以下叙述中不正确的是（D）
A.在不同的函数中可以使用相同名字的变量

B.函数中的形式参数是在栈中保存

C.在一个函数内定义的变量只在本函数范围内有效

D.在一个函数内复合语句中定义的变量在本函数范围内有效（复合语句指函数中的成对括号构成的代码）

3.下面代码的结果是（B）
#include<stdio.h>
int main()
{
	int arr[] = { 1,2,(3,4),5 };
	printf("%d\n", sizeof(arr));
	return 0;
}
A.4
B.16
C.20
D.5

4.下面代码输出的结果是（C）
#include<stdio.h>
int main()
{
	int a = 0x11223344;
	char* pc = (char*)&a;
	*pc = 0;
	printf("%x\n", a);
	return 0;
}
A.00223344
B.0
C.11223300
D.112233

5.下面代码的结果是（A）
#include<stdio.h>
int i;
int main()
{
	i--;
	if (i > sizeof(i))
	{
		printf(">\n");
	}
	else
	{
		printf("<\n");
	}
	return 0;
}
A.>
B.<
C.不输出
D.程序有问题

6.求二进制中不同位的个数

#include<stdio.h>
int count_bit_one(int n)
{
	int count = 0;
	while (n)
	{
		count++;
		n = n & (n - 1);
	}
	return count;
}

int get_diff_bit(int m, int n)
{
	int tmp = m ^ n;
	return count_bit_one(tmp);
}

int main()
{
	int m = 0;
	int n = 0;
	scanf("%d%d", &m, &n);
	int count=get_diff_bit(m, n);
	printf("count=%d\n", count);
	return 0;
}

7.获取一个整数二进制序列中的偶数位和奇数位，分别打印出二进制序列

#include<stdio.h>
void print(int m)
{
	int i = 0;
	printf("奇数位：\n");
	for (i = 30; i >= 0; i -= 2)
	{
		printf("%d ", (m >> i) & 1);
	}
	printf("\n");
	printf("偶数位：\n");
	for (i = 31; i >= 1; i -= 2)
	{
		printf("%d ", (m >> i) & 1);
	}
}

int main()
{
	int m = 0;
	scanf("%d", &m);
	print(m);
	return 0;
}

8.编写一个函数reverse_string(char*string)(递归实现)，实现字符串中的字符反向排列（不能使用strlen）
#include<stdio.h>
int my_strlen(char* p)
{
	char* start = p;
	char* end = p;
	while (*end != '\0')
	{
		end++;
	}
	return end - start;
}

void reverse_string(char arr[])
{
	char tmp = arr[0];
	int len = my_strlen(arr);
	arr[0] = arr[len - 1];
	arr[len - 1] = '\0';
	if (my_strlen(arr + 1) >= 2)
		reverse_string(arr + 1);
	arr[len - 1] = tmp;
}

int main()
{
	char arr[] = "abcdefg";
	reverse_string(arr);
	printf("%s\n", arr);
	return 0;
}