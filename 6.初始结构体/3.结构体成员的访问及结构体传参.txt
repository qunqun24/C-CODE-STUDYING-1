#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>


typedef struct Teather
{
	char name[20];
	short age;
	char tele[12];
	char sex[5];
}Tea;

void Print1(Tea tmp)//tmp是s的一份拷贝
{
	printf("\n访问方法1：用(.)来访问\n");
	printf("name:%s\n", tmp.name);
	printf("age:%d\n", tmp.age);
	printf("tele:%s\n", tmp.tele);
	printf("sex:%s\n", tmp.sex);
}

void Print2(Tea* ps)//ps是&s的一份拷贝,而地址只有4/8个字节
{
	printf("\n访问方法2：用(->)来访问\n");
	printf("name:%s\n", ps->name);
	printf("age:%d\n", ps->age);
	printf("tele:%s\n", ps->tele);
	printf("sex:%s\n", ps->sex);
}

int main()
{
	Tea s = {"张三",20,"17551107817","男"};
	Print1(s);
	Print2(&s);
	//Print2更优，参数压栈的系统开销比较小。
	return 0;
}

//结论1：结构体传参的时候，要传结构体的地址。
//结论2：函数传参的时候，参数是需要压栈的。如果传递一个结构体对象的时候，结构体过大，参数压栈的的系统开销比较大，所以会导致性能的下降。