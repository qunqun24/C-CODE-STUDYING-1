//问题：编写代码，演示多个字符从两端移动，向中间汇聚。
//输出示例：
//w########!
//we######!!
//...
//welcome!!!


//解：
#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>
#include<string.h>//strlen函数头文件
#include<windows.h>//Sleep函数头文件
#include<stdlib.h>//system函数头文件

int main()//优化版 —— 很方便简洁 666
{
	char arr1[] = "welcome to bit!!!!!!";
	char arr2[] = "####################";
	int left = 0;
	int right = strlen(arr1)-1;//strlen函数计算字符串长度时不包括‘\0’,求下标只要减一即可
	while (left <=  right)
	{
		arr2[left] = arr1[left];
		arr2[right] = arr1[right];
		printf("%s\n", arr2);
		
		Sleep(1000);//休息一秒
		system("cls");//system函数执行系统命令-cls-清屏
		
		left++;
		right--;
	}
	printf("%s\n", arr2);//最后一次不清屏
	return 0;
}


/////////////////////////////////////////////////////////////////////////////////////



/*#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>

int main()// 经典版 —— for循环嵌套（真的写的好晕，里面可能有错）
{
	int i = 0;
	int k = 0;
	int m = 0;
	int n = 0;
	char arr[] = "welcome to bit!!!";
	int sz = sizeof(arr) / sizeof(arr[0]);
	
	for (i = 0; i < sz/2+1; i++)
	{
		for (k = 0; k < i; k++)
		{
			printf("%c", arr[k]);//输出前一半字符
		}
		for (n=i;n<sz-i-1;n++)
		{
			printf("#");//输出#号
		}
		for (m = sz - i-1; m < sz-1; m++)
		{
			if (m==sz/2-1)
				continue;
			printf("%c", arr[m]);//输出后一半字符
		}
		printf("\n");
	}
	return 0;
}*/
//去查了一下，确实有点错：
//用sz = sizeof(arr) / sizeof(arr[0])计算最右边一个字符（不是'\0' ）下标时需要-2
//比如："abc"其实用上面公式算出来是sz=4，表明此计算方法将"'a','b','c','\0'"都计入,它们的下标是0，1，2，3。
//以上程序虽然结果没错，但我是写完了才发现这个问题，所以到处去减1，写的很乱。




